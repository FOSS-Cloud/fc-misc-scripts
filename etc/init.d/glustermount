#!/sbin/runscript
#
# Copyright (C) 2011 FOSS-Group
#                    Germany
#                    http://www.foss-group.de
#                    support@foss-group.de
#
# Authors:
#  Christian Affolter <christian.affolter@stepping-stone.ch>
#  
# Licensed under the EUPL, Version 1.1 or â€“ as soon they
# will be approved by the European Commission - subsequent
# versions of the EUPL (the "Licence");
# You may not use this work except in compliance with the
# Licence.
# You may obtain a copy of the Licence at:
#
# http://www.osor.eu/eupl
#
# Unless required by applicable law or agreed to in
# writing, software distributed under the Licence is
# distributed on an "AS IS" basis,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied.
# See the Licence for the specific language governing
# permissions and limitations under the Licence.
#
# $Id: glustermount 218 2011-10-06 14:22:46Z christian.affolter@stepping-stone.ch $
#
#
# Mounting a GlusterFS volume with failover on multiple volfile servers.
# 
# This is a multiplex init script, heavily inspired by the Gentoo glusterfsd
# script.
# There has to be one init script (symlink) per configuration (mostly volume).
# Simply symlink this script to glustermount.[yourname] and make sure that
# all GLUSTERMOUNT_XY_[yourname] variables are configured within
# /etc/conf.d/glustermount
#
# This script will be obsolete as soon as the 'backupvolfile-server' option
# works as expected, respective glusterfs returns a proper error code
# (and not 0) when mounting fails.
# See:
# http://bugs.gluster.com/show_bug.cgi?id=3085
# http://bugs.gluster.com/show_bug.cgi?id=1203

if [[ "${SVCNAME}" != "glustermount" ]]
then
        GLUSTERMOUNT_NAME="${SVCNAME#glustermount.}"
else
        GLUSTERMOUNT_NAME="default"
fi


eval 'GLUSTERMOUNT_SERVERS="${GLUSTERMOUNT_SERVERS_'${GLUSTERMOUNT_NAME}'}"'
eval 'GLUSTERMOUNT_OPTS="${GLUSTERMOUNT_OPTS_'${GLUSTERMOUNT_NAME}'}"'
eval 'GLUSTERMOUNT_VOLUME="${GLUSTERMOUNT_VOLUME_'${GLUSTERMOUNT_NAME}'}"'
eval 'GLUSTERMOUNT_MOUNTPOINT="${GLUSTERMOUNT_MOUNTPOINT_'${GLUSTERMOUNT_NAME}'}"'
eval 'GLUSTERMOUNT_MAX_RETRIES="${GLUSTERMOUNT_MAX_RETRIES_'${GLUSTERMOUNT_NAME}'}"'
eval 'GLUSTERMOUNT_SLEEP="${GLUSTERMOUNT_SLEEP_'${GLUSTERMOUNT_NAME}'}"'


depend() {
        need net fuse
        use dns
        before netmount
        after firewall ntp-client ntpd
}


checkconfig() {
        if [ -z "${GLUSTERMOUNT_SERVERS}" ]; then
                eerror "Missing GlusterFS server(s)"
                einfo "Specifiy the servers within GLUSTERMOUNT_SERVERS_${GLUSTERMOUNT_NAME}"
                return 1
        fi

        if [ -z ${GLUSTERMOUNT_VOLUME} ]; then
                eerror "Missing GlusterFS volume name"
                einfo "Specifiy the volume name within GLUSTERMOUNT_VOLUME_${GLUSTERMOUNT_NAME}"
                return 1
        fi

        if [ -z ${GLUSTERMOUNT_MOUNTPOINT} ]; then
                error "Missing local mountpoint"
                einfo "Specifiy the mountpoint within GLUSTERMOUNT_MOUNTPOINT_${GLUSTERMOUNT_NAME}"
                return 1
        fi

        if [ ! -d ${GLUSTERMOUNT_MOUNTPOINT} ]; then
                eerror "The mountpoint ${GLUSTERMOUNT_MOUNTPOINT} does not exist"
                return 1
        fi

        if [ -z ${GLUSTERMOUNT_MAX_RETRIES} ]; then
                # default to 3 seconds
                GLUSTERMOUNT_MAX_RETRIES=3
        fi

        if [ -z ${GLUSTERMOUNT_SLEEP} ]; then
                # default to 3 seconds
                GLUSTERMOUNT_SLEEP=3
        fi
}

mount_glusterfs() {
        local mountcmd="/bin/mount -t glusterfs"

        if [ -n "$GLUSTERMOUNT_OPTS" ]
        then
                mountcmd="${mountcmd} -o $GLUSTERMOUNT_OPTS"
        fi

        local run=0
        while [ $run -lt $GLUSTERMOUNT_MAX_RETRIES ]; do
                for server in ${GLUSTERMOUNT_SERVERS}; do
                        $mountcmd ${server}:/${GLUSTERMOUNT_VOLUME} \
                                  ${GLUSTERMOUNT_MOUNTPOINT}

                        if glustermount_is_present "${GLUSTERMOUNT_MOUNTPOINT}";                        then
                                einfo "Mounted from server ${server}"
                                return 0
                        else
                                ewarn "Mounting from server ${server} failed"
                        fi
                done

                ewarn "Mount failed, retrying in ${GLUSTERMOUNT_SLEEP} seconds"
                sleep ${GLUSTERMOUNT_SLEEP}
                let run++
        done

        eerror "Mount failed for all servers with ${run} retry"
        return 1
}

glustermount_is_present() {
        # inspired by http://patches.gluster.com/patch/7796/
        # A GlusterFS mount point always has inode number one.
        local mount_point=$1

        if [ "$(/usr/bin/stat -c %i $mount_point 2>/dev/null)" = "1" ]; then
            # GlusterFS was successfully mounted
            return 0
        fi

        return 1
}

start() {
        checkconfig || return 1
        ebegin "Mounting GlusterFS filesystem ${GLUSTERMOUNT_NAME}"
        mount_glusterfs
        eend $?
}

stop() {
        checkconfig || return 1
        ebegin "Unmounting GlusterFS filesystem ${GLUSTERMOUNT_NAME}"
        umount ${GLUSTERMOUNT_MOUNTPOINT}
        eend $?

}
